#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

// Define maximum number of valid opcodes
#define MAX_OPCODES 5

// Function to simulate an interrupt (error)
void raise_interrupt(const char *error_message) {
    printf("Error: %s\n", error_message);
    printf("Interrupt raised! Exiting the program...\n");
    exit(1); // Terminate the program on error
}

// Function to check if the opcode and format are valid
int is_valid_opcode(const char *instruction) {
    // List of valid opcodes
    const char *valid_opcodes[MAX_OPCODES] = {"GD", "PD", "LR", "SR", "CR"};
    
    // Check if the instruction starts with a valid opcode (first two characters)
    int opcode_found = 0;
    for (int i = 0; i < MAX_OPCODES; i++) {
        if (strncmp(instruction, valid_opcodes[i], 2) == 0) {
            opcode_found = 1;
            break;
        }
    }
    
    // If opcode is not found, return invalid
    if (!opcode_found) {
        return 0;
    }

    // If the instruction is exactly two characters, it's valid (no operand required)
    if (strlen(instruction) == 2) {
        return 1;
    }

    // Check if the 3rd and 4th positions contain digits (only if the instruction is longer than 2 characters)
    if (strlen(instruction) == 4 && isdigit(instruction[2]) && isdigit(instruction[3])) {
        return 1; // Valid format with two digits after the opcode
    }

    return 0; // Invalid format
}

// Function to check if the operand is valid
int is_valid_operand(int operand) {
    return 1; // Always return valid (no range check here)
}

// Function to process the job (list of instructions and operands)
void process_job(const char instructions[][10], int operands[], int num_instructions) {
    for (int i = 0; i < num_instructions; i++) {
        printf("Processing instruction: %s %d\n", instructions[i], operands[i]);
        
        // Check if the opcode and format are valid
        if (!is_valid_opcode(instructions[i])) {
            raise_interrupt("Invalid opcode or instruction format encountered!");
        }
        
        // Check if the operand is valid (no range check here)
        if (!is_valid_operand(operands[i])) {
            raise_interrupt("Invalid operand encountered!");
        }
    }
    printf("All instructions processed successfully.\n");
}

int main() {
    int num_instructions;
    
    // Ask the user for the number of instructions
    printf("Enter the number of instructions: ");
    scanf("%d", &num_instructions);

    // Arrays to store instructions and operands
    char instructions[num_instructions][10];
    int operands[num_instructions];
    
    // Take input instructions and operands from the user
    printf("Enter the instructions and operands (e.g., GD23 50):\n");
    for (int i = 0; i < num_instructions; i++) {
        scanf("%s %d", instructions[i], &operands[i]);
    }
    
    // Process the job and check for opcode and operand errors
    process_job(instructions, operands, num_instructions);
    
    return 0;
}
